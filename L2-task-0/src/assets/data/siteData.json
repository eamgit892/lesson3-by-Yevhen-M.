[
    {
        "title": "State hooks",
        "body": 
        "State lets a component “remember” information like user input. For example, a form component can use state to store the input value, while an image gallery component can use state to store the selected image index. To add state to a component, use one of these Hooks: useState declares a state variable that you can update directly. useReducer declares a state variable with the update logic inside a reducer function.",
        "href": "https://react.dev/reference/react/hooks#state-hooks"

    }, 
    {
        "title": "Context Hooks",
        "body": 
         "Context lets a component receive information from distant parents without passing it as props. For example, your app’s top-level component can pass the current UI theme to all components below, no matter how deep. useContext reads and subscribes to a context.",
        "href": "https://react.dev/reference/react/hooks#context-hooks"
    }, 
    {
        "title": "Ref Hooks ",
        "body": 
         "Refs let a component hold some information that isn’t used for rendering, like a DOM node or a timeout ID. Unlike with state, updating a ref does not re-render your component. Refs are an “escape hatch” from the React paradigm. They are useful when you need to work with non-React systems, such as the built-in browser APIs. useRef declares a ref. You can hold any value in it, but most often it’s used to hold a DOM node. useImperativeHandle lets you customize the ref exposed by your component. This is rarely used.",
        "href": "https://react.dev/reference/react/hooks#ref-hooks"
    } ,
    {
        "title": "Effect Hooks",
        "body": 
         "Effects let a component connect to and synchronize with external systems. This includes dealing with network, browser DOM, animations, widgets written using a different UI library, and other non-React code.useEffect connects a component to an external system.",
        "href": "https://react.dev/reference/react/hooks#effect-hooks"
    } 
]